// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day2.input.txt", "utf8");

function splitCase(input) {
  return input.split("\n");
}

function splitInfo(input) {
  return Belt_Array.map(input.split(/\s|-|:\s/), (function (x) {
                return Belt_Option.getWithDefault(x, "");
              }));
}

function stringToInt(str) {
  return Belt_Option.getWithDefault(Belt_Int.fromString(str), 0);
}

function arrayToPassword(info) {
  return {
          min: Belt_Option.mapWithDefault(Belt_Array.get(info, 0), 0, stringToInt),
          max: Belt_Option.mapWithDefault(Belt_Array.get(info, 1), 0, stringToInt),
          letter: Belt_Option.getWithDefault(Belt_Array.get(info, 2), ""),
          pw: Belt_Option.getWithDefault(Belt_Array.get(info, 3), "")
        };
}

function isInRange(num, min, max) {
  var match = num >= min;
  var match$1 = num <= max;
  if (match && match$1) {
    return 1;
  } else {
    return 0;
  }
}

function countOccurrence(data) {
  return Belt_Option.mapWithDefault(Caml_option.null_to_opt(data.pw.match(new RegExp(data.letter, "g"))), 0, (function (prim) {
                return prim.length;
              }));
}

function checkValidity(data) {
  return isInRange(countOccurrence(data), data.min, data.max);
}

function sum(array) {
  return Belt_Array.reduce(array, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

console.log(sum(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n"), splitInfo), arrayToPassword), checkValidity)));

function checkPosition(pos, letter, password) {
  return password.charAt(pos - 1 | 0) === letter;
}

function checkValidity2(data) {
  var match = checkPosition(data.min, data.letter, data.pw);
  var match$1 = checkPosition(data.max, data.letter, data.pw);
  if (match) {
    if (match$1) {
      return 0;
    } else {
      return 1;
    }
  } else if (match$1) {
    return 1;
  } else {
    return 0;
  }
}

console.log(sum(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n"), splitInfo), arrayToPassword), checkValidity2)));

exports.input = input;
exports.splitCase = splitCase;
exports.splitInfo = splitInfo;
exports.stringToInt = stringToInt;
exports.arrayToPassword = arrayToPassword;
exports.isInRange = isInRange;
exports.countOccurrence = countOccurrence;
exports.checkValidity = checkValidity;
exports.sum = sum;
exports.checkPosition = checkPosition;
exports.checkValidity2 = checkValidity2;
/* input Not a pure module */
