// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync("input/Week2/Year2020Day2.input.txt", "utf8");

function handleOption(input, none) {
  if (input !== undefined) {
    return Caml_option.valFromOption(input);
  } else {
    return none;
  }
}

function splitCase(input) {
  return input.split("\n");
}

function splitInfo(input) {
  return Belt_Array.map(input.split(/\s|-|:\s/), (function (x) {
                return handleOption(x, "");
              }));
}

function stringToInt(str) {
  var num = Belt_Int.fromString(str);
  if (num !== undefined) {
    return num;
  } else {
    return 0;
  }
}

function arrayToPassword(info) {
  var str = Belt_Array.get(info, 0);
  var str$1 = Belt_Array.get(info, 1);
  var str$2 = Belt_Array.get(info, 2);
  var str$3 = Belt_Array.get(info, 3);
  return {
          min: str !== undefined ? stringToInt(str) : 0,
          max: str$1 !== undefined ? stringToInt(str$1) : 0,
          letter: str$2 !== undefined ? str$2 : "",
          pw: str$3 !== undefined ? str$3 : ""
        };
}

function isInRange(num, min, max) {
  var match = num >= min;
  var match$1 = num <= max;
  if (match && match$1) {
    return 1;
  } else {
    return 0;
  }
}

function countOccurrence(pw) {
  return handleOption(Caml_option.null_to_opt(pw.pw.match(new RegExp(pw.letter, "g"))), []).length;
}

function checkValidity(pw) {
  return isInRange(countOccurrence(pw), pw.min, pw.max);
}

function sum(array) {
  return Belt_Array.reduce(array, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

console.log(sum(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n"), splitInfo), arrayToPassword), checkValidity)));

exports.input = input;
exports.handleOption = handleOption;
exports.splitCase = splitCase;
exports.splitInfo = splitInfo;
exports.stringToInt = stringToInt;
exports.arrayToPassword = arrayToPassword;
exports.isInRange = isInRange;
exports.countOccurrence = countOccurrence;
exports.checkValidity = checkValidity;
exports.sum = sum;
/* input Not a pure module */
