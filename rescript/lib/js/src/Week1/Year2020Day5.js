// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

var input = Fs.readFileSync("input/Week1/Year2020Day5.input.txt", "utf8");

function splitInput(pattern) {
  return pattern.split("\n");
}

var inputArray = Belt_Array.map(input.split("\n"), (function (x) {
        return x.split("");
      }));

function infoToNum(info) {
  return Belt_Array.map(info, (function (xs) {
                switch (xs) {
                  case "B" :
                  case "R" :
                      return 1;
                  default:
                    return 0;
                }
              }));
}

function getSeatId(num) {
  return Belt_Array.reduceWithIndex(num, 0, (function (acc, v, i) {
                var exp = num.length - (i + 1 | 0) | 0;
                var increment = Math.pow(2, exp);
                return acc + Math.imul(v, increment) | 0;
              }));
}

function getMaxId(ids) {
  return Caml_splice_call.spliceApply(Math.max, [ids]);
}

var seatIds = Belt_Array.map(Belt_Array.map(inputArray, infoToNum), getSeatId);

console.log(Caml_splice_call.spliceApply(Math.max, [seatIds]));

function getMinId(ids) {
  return Caml_splice_call.spliceApply(Math.min, [ids]);
}

var maxId = Caml_splice_call.spliceApply(Math.max, [seatIds]);

var minId = Caml_splice_call.spliceApply(Math.min, [seatIds]);

function getEmptyId(ids) {
  var seatIdRange = Belt_Array.range(minId, maxId);
  return Belt_Array.keep(seatIdRange, (function (x) {
                return !ids.includes(x);
              }));
}

console.log(getEmptyId(seatIds));

exports.input = input;
exports.splitInput = splitInput;
exports.inputArray = inputArray;
exports.infoToNum = infoToNum;
exports.getSeatId = getSeatId;
exports.getMaxId = getMaxId;
exports.seatIds = seatIds;
exports.getMinId = getMinId;
exports.maxId = maxId;
exports.minId = minId;
exports.getEmptyId = getEmptyId;
/* input Not a pure module */
