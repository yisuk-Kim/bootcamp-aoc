// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

var input = Fs.readFileSync("input/Week1/Year2020Day6.input.txt", "utf8");

function splitInput(data) {
  return data.split("\n");
}

function getBlankPos(data) {
  return Belt_Array.keep(Belt_Array.mapWithIndex(data, (function (i, x) {
                    if (x === "") {
                      return i;
                    } else {
                      return 0;
                    }
                  })), (function (x) {
                return x !== 0;
              }));
}

function getGroupSize(front, back) {
  return (back - front | 0) - 1 | 0;
}

function splitGroup(data) {
  var blankPos = Belt_Array.concat(getBlankPos(data), [data.length]);
  return Belt_Array.mapWithIndex(blankPos, (function (i, x) {
                if (i !== 0) {
                  var groupSize = getGroupSize(Caml_array.get(blankPos, i - 1 | 0), x);
                  return Belt_Array.slice(data, Caml_array.get(blankPos, i - 1 | 0) + 1 | 0, groupSize);
                }
                var groupSize$1 = getGroupSize(-1, x);
                return Belt_Array.slice(data, 0, groupSize$1);
              }));
}

function splitAnswer(answer) {
  return Belt_Array.map(answer, (function (x) {
                return x.split("");
              }));
}

function getUnion(answer) {
  return Belt_Array.reduceWithIndex(answer, [], (function (acc, xs, i) {
                if (i === 0) {
                  return xs;
                } else {
                  return Belt_Array.concat(Belt_Array.keep(xs, (function (x) {
                                    return !acc.includes(x);
                                  })), acc);
                }
              }));
}

function countQuestionNumber(question) {
  return question.length;
}

function sum(num) {
  return Belt_Array.reduce(num, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

console.log(sum(Belt_Array.map(Belt_Array.map(Belt_Array.map(splitGroup(input.split("\n")), splitAnswer), getUnion), (function (x) {
                return x.length;
              }))));

function getIntersection(answer) {
  return Belt_Array.reduceWithIndex(answer, [], (function (acc, xs, i) {
                if (i === 0) {
                  return xs;
                } else {
                  return Belt_Array.keep(acc, (function (x) {
                                return xs.includes(x);
                              }));
                }
              }));
}

console.log(sum(Belt_Array.map(Belt_Array.map(Belt_Array.map(splitGroup(input.split("\n")), splitAnswer), getIntersection), (function (x) {
                return x.length;
              }))));

exports.input = input;
exports.splitInput = splitInput;
exports.getBlankPos = getBlankPos;
exports.getGroupSize = getGroupSize;
exports.splitGroup = splitGroup;
exports.splitAnswer = splitAnswer;
exports.getUnion = getUnion;
exports.countQuestionNumber = countQuestionNumber;
exports.sum = sum;
exports.getIntersection = getIntersection;
/* input Not a pure module */
