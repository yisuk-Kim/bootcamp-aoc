// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var input = Fs.readFileSync("input/Week1/Year2020Day6.input.txt", "utf8");

function splitGroup(data) {
  return data.split("\n\n");
}

function splitPerson(data) {
  return data.split("\n");
}

function splitAnswer(answer) {
  return answer.split("");
}

var answerArrayToSet = Belt_SetString.fromArray;

function getUnion(answer) {
  return Belt_Array.reduce(answer, undefined, Belt_SetString.union);
}

var getSize = Belt_SetString.size;

function sum(num) {
  return Belt_Array.reduce(num, 0, (function (acc, x) {
                return acc + x | 0;
              }));
}

var answerSet = Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n\n"), (function (x) {
                return x.split("\n");
              })), (function (xs) {
            return Belt_Array.map(xs, (function (x) {
                          return x.split("");
                        }));
          })), (function (xs) {
        return Belt_Array.map(xs, Belt_SetString.fromArray);
      }));

console.log(sum(Belt_Array.map(Belt_Array.map(answerSet, getUnion), Belt_SetString.size)));

function getIntersection(answer) {
  var set = Belt_Array.get(answer, 0);
  return Belt_Array.reduce(answer, set !== undefined ? Caml_option.valFromOption(set) : undefined, Belt_SetString.intersect);
}

console.log(sum(Belt_Array.map(Belt_Array.map(answerSet, getIntersection), Belt_SetString.size)));

exports.input = input;
exports.splitGroup = splitGroup;
exports.splitPerson = splitPerson;
exports.splitAnswer = splitAnswer;
exports.answerArrayToSet = answerArrayToSet;
exports.getUnion = getUnion;
exports.getSize = getSize;
exports.sum = sum;
exports.answerSet = answerSet;
exports.getIntersection = getIntersection;
/* input Not a pure module */
